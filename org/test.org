

Exemplar Bag

* Tasks
** DONE Start a new org file
   CLOSED: [2015-07-11 Sat 22:52]
** DONE Provide some working examples
   CLOSED: [2015-07-15 Wed 11:34]
** DONE Have a cup of tea c
   CLOSED: [2015-07-15 Wed 11:34]
** DONE Commit this example
CLOSED: [2015-10-02 Fri 02:38]

** TODO Try org inline images
this version of emacs has support for both win and osx:
http://vgoulet.act.ulaval.ca/en/emacs/
* Playing with pretty entities
** reference
http://orgmode.org/manual/Special-symbols.html
** Greek Alphabet: 
meanings: http://www.greece.com/info/language/greek_alphabet/
*** examples
Angles are written as Greek letters \alpha, \beta and \gamma.
\alpha \to \omega
something is \not \empty 
\pi tastes like pie
\sum of the parts
\lambda expressions are fun
\psi chological wonderland
\theta theta cool
\epsilon epsilon
\ni ni
\nu nu
* Running code from multiple languages
** Using python
#+begin_src python
import datetime
today = datetime.date.today()
return today
#+end_src
** Using ruby
#+begin_src ruby
  require 'date'
  "This file was last evaluated on #{Date.today}"
#+end_src

** Using clojure
#+begin_src clojure
  (defn now [] (java.util.Date.))
  (now)
#+end_src

** Using lisp
examples - http://orgmode.org/manual/var.html

#+begin_src lisp
  (defun current-date-string ()
    "Returns current date as a string."
    (multiple-value-bind (sec min hr day mon yr dow dst-p tz)
                         (get-decoded-time)
      (declare (ignore sec min hr dow dst-p tz))
      (format nil "~4,'0d-~2,'0d-~2,'0d" yr mon day)))
  (current-date-string)
#+end_src

#+name: hello-world
#+header: :var message="Hello World!"
#+begin_src lisp
  (princ message)
#+end_src

#+NAME: example-table
| 1 |
| 2 |
| 3 |
| 4 |
#+NAME: table-length
#+BEGIN_SRC emacs-lisp :var table=example-table
  (length table)
#+END_SRC

#+RESULTS: table-length
: 4

** Using Elisp
#+begin_src elisp

  (setq org-pretty-entities t) 

#+end_src         

* Working With Elasticsearch
** Searching ES
#+BEGIN_SRC es
POST /_search?pretty
{
  "query": {
    "match_all": {}
  }
}
#+END_SRC

#+RESULTS:
#+begin_example
{
  "took" : 1,
  "timed_out" : false,
  "_shards" : {
    "total" : 0,
    "successful" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : 0,
    "max_score" : 0.0,
    "hits" : [ ]
  }
}
#+end_example

** Searching ES without parameters
#+BEGIN_SRC es :method POST :url localhost:9200/_search?pretty
{
  "query": {
    "match_all": {}
  }
}
#+END_SRC

** Searching ES with local jq filter
#+BEGIN_SRC es :jq .name, .version.number
GET /
{}
#+END_SRC

** Creating and Searching for documents in ES for user data with local jq filter



#+begin_src es
POST /twitter/tweet/
{
     "user" : "samples",
     "@timestamp" : "2015-09-10T19:12:12-05:00",
     "message" : "bye bye...",
     "foo" : "bar"
}
#+end_src



#+begin_src es
GET /twitter/_search?pretty&q=user:samples
{}
#+end_src


** Digging out logstash documents

#+begin_src es :jq .hits.hits[0]
GET /logstash-2015.07.14/_search
{}
#+end_src

** Searching ES with the CSV Plugin
#+BEGIN_SRC es
POST /_search_csv?pretty
{
  "query": {
    "match_all": {}
  }
}
#+END_SRC
   



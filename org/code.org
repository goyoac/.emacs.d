#+TITLE: Code Examples in Org
#+AUTHOR: Joel Holder
#+EMAIL: jclosure@gmail.com
#+STARTUP: indent
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: H:3 num:nil toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS: author:nil email:nil creator:nil timestamp:nil
#+OPTIONS: d:t
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LANGUAGE: en
#+TAGS: noexport(n) Emacs(E) Python(P) Ruby(R) Clojure(C) Elasticsearch(ES)
#+HTML_HEAD: <link rel="stylesheet" title="Standard" href="./css/worg.css" type="text/css" />
#+XSLT:


file:img/runningman.gif

* Tasks
:PROPERTIES:
:ID:       0da65840-8dee-4085-bc9d-985ebd7c3b87
:PUBDATE:  <2015-10-04 Sun 02:54>
:END:
** DONE Start a new org file
   CLOSED: [2015-07-11 Sat 22:52]
   :PROPERTIES:
   :ID:       0d0e8f5b-0263-436d-a369-8330cd307c40
   :END:
** DONE Provide some working examples
   CLOSED: [2015-07-15 Wed 11:34]
   :PROPERTIES:
   :ID:       2f2b0607-fc1f-46f7-92dc-88413a1c291b
   :END:
** DONE Have a cup of tea c
   CLOSED: [2015-07-15 Wed 11:34]
   :PROPERTIES:
   :ID:       5e0647cc-3c50-4cdb-8efa-59261575a116
   :END:
** DONE Commit this example
CLOSED: [2015-10-02 Fri 02:38]
:PROPERTIES:
:ID:       fe706c6e-ec1f-4120-b2d3-f7a4ac6770cf
:END:

** TODO Try org inline images
:PROPERTIES:
:ID:       7063080b-2b9d-48e8-bde7-cb0b8fc48f0c
:END:
this version of emacs has support for both win and osx:
http://vgoulet.act.ulaval.ca/en/emacs/
* Playing with pretty entities
:PROPERTIES:
:ID:       692d0394-c101-4a8a-b55c-a81f16cd0a3c
:PUBDATE:  <2015-10-04 Sun 02:54>
:END:
** reference
:PROPERTIES:
:ID:       feaf00dd-26e7-4e56-9003-56b856a6be2e
:END:
http://orgmode.org/manual/Special-symbols.html
** Greek Playing Around:
:PROPERTIES:
:ID:       c7dd7ec5-5d6b-47b4-ab4f-f7bf2f41bd8d
:END:
meanings: http://www.greece.com/info/language/greek_alphabet/
*** examples
:PROPERTIES:
:ID:       7ff6f685-42d5-4a4c-aaf4-6d656dbc66e1
:END:

:Greek:

Angles are written as Greek letters \alpha, \beta and \gamma.

\alpha \to \omega

something is \not \empty

\pi tastes like pie

\sum of the parts

\lambda expressions are fun

\psi chological

\theta theta cool

\epsilon epsilon

\ni ni

\nu nu

\in infinity

:END:

** Special Symbols
:PROPERTIES:
:ID:       b4fcbf25-6aa4-4d90-8c0d-e8514049e8d2
:END:

http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html

** Unicode
:PROPERTIES:
:ID:       f2b29801-4a43-4d8f-bc66-584164b4eb1d
:END:

http://ergoemacs.org/emacs/emacs_n_unicode.html

* LaTeX test
:PROPERTIES:
:ID:       f72a3c31-6db3-4cd7-9a0d-b35e0d0bbf62
:PUBDATE:  <2015-10-06 Tue 10:51>
:END:


formula 1:

\begin{equation}
x=\sqrt{b}
\end{equation}



formula 2:

\[
e^{i\pi} = -1
\]

\[
\int_0^\infty e^{-x^8} dx = \frac{\sqrt{\pi}}{2}
\]

* Controlling what get's exported
:PROPERTIES:
:ID:       e8d1ac45-e75a-4cca-8326-de37085301c6
:PUBDATE:  <2015-10-07 Wed 14:53>
:END:

** :exports code #=> Exports codeblock only (default behavior)
:PROPERTIES:
:ID:       f307c0d8-f6c7-4c5c-b365-6c9539f376c5
:END:
** :exports results #=> Exports only results
:PROPERTIES:
:ID:       a21672e7-2dc0-419d-8ced-b4587501569f
:END:
** :exports both #=> Exporse codeblock and results
:PROPERTIES:
:ID:       afc89a8e-9523-4b89-82cb-9a44ec679b6e
:END:

See below for examples

* Running code from multiple languages
:PROPERTIES:
:ID:       ac7cb5aa-d4c7-4bc5-8bb6-b0f0b924392f
:PUBDATE:  <2015-10-04 Sun 02:54>
:END:

I am going to show you some elisp

** Using python
:PROPERTIES:
:ID:       445154ff-0d9e-453c-bf0a-f18261d24f47
:END:
#+begin_src python
import datetime
today = datetime.date.today()
return today
#+end_src

** Using ruby
:PROPERTIES:
:ID:       5128d221-ff05-4933-8ca6-65de91effaa4
:END:
#+begin_src ruby
  require 'date'
  "This file was last evaluated on #{Date.today}"
#+end_src

** Using clojure
:PROPERTIES:
:ID:       ac30ddff-025d-4aa4-b769-95f277092c3b
:END:
#+begin_src clojure
  (defn now [] (java.util.Date.))
  (now)
#+end_src

** Using emacs lisp
:PROPERTIES:
:ID:       25705cdf-182d-4f46-8ffe-3639a2b4e63d
:END:

simple form evaluation

#+begin_src emacs-lisp

  (+ (* 2 3) 9)

#+end_src


using tables


#+NAME: example-table
| col1 | col2 |
|------+------|
|    1 | abc  |
|    2 | def  |
|    3 | ghi  |
|    4 | jkl  |
|    5 | mno  |
#+NAME: table-length


#+BEGIN_SRC emacs-lisp :var table=example-table
  (length table)
#+END_SRC


#+BEGIN_SRC emacs-lisp :var table=example-table
  (cdr table)
#+END_SRC

** Using common lisp
:PROPERTIES:
:ID:       d29300ab-088a-4ca5-93e2-7a976ff7b2c6
:END:
examples - http://orgmode.org/manual/var.html

note: install and enable slime for these codeblocks

#+begin_src lisp
  (defun current-date-string ()
    "Returns current date as a string."
    (multiple-value-bind (sec min hr day mon yr dow dst-p tz)
                         (get-decoded-time)
      (declare (ignore sec min hr dow dst-p tz))
      (format nil "~4,'0d-~2,'0d-~2,'0d" yr mon day)))
  (current-date-string)
#+end_src

#+name: hello-world
#+header: :var message="Hello World!"
#+begin_src lisp
  (princ message)
#+end_src

** Using c
#+HEADERS: :includes <math.h> :flags -lm
#+HEADERS: :var x=1.0 :var y=4.0 :var z=10.0
#+BEGIN_SRC C :exports both
double pi = 4*atan(1);
double r, theta, phi;
r = sqrt(x*x+y*y+z*z);
theta = acos(z/r) * 180.0/pi;
phi = atan2(y,x) * 180.0/pi;
printf("%f %f %f", r, theta, phi);
#+END_SRC

** Using java
#+HEADERS: :classname HelloWorld :cmdline "-cp ."
#+begin_src java  :results output :exports both :dir "./java"
  public class HelloWorld {
      public static void main(String[] args) {
          System.out.println("Hello, World");
      }
  }
#+end_src

** Using R

#+begin_src R :file 3.png :results output graphics
library(lattice)
xyplot(1:10 ~ 1:10)
#+end_src

** Using shellscript

#+begin_src bash

echo "Hello my darling Shell..."

#+end_src



* Working With Elasticsearch
:PROPERTIES:
:ID:       f9a252bd-8909-42a5-8bf5-97c67a6be20e
:PUBDATE:  <2015-10-04 Sun 02:54>
:END:
** Searching ES
:PROPERTIES:
:ID:       2f868cbc-cf3d-48de-9f71-241ba893fc8f
:END:
#+BEGIN_SRC es
POST /_search?pretty
{
  "query": {
    "match_all": {}
  }
}
#+END_SRC

** Searching ES without parameters
:PROPERTIES:
:ID:       ad2771ab-7bca-4f72-b7cd-8256b448f444
:END:
#+BEGIN_SRC es :method 
POST :url localhost:9200/_search?pretty
{
  "query": {
    "match_all": {}
  }
}
#+END_SRC

** Searching ES with local jq filter
:PROPERTIES:
:ID:       b6f422a5-1d16-4c83-89df-6cdae7b892e8
:END:
#+BEGIN_SRC es :jq .name, .version.number
GET /
{}
#+END_SRC


** Creating and Searching for documents in ES for user data with local jq filter
SCHEDULED: <2015-10-08 Thu>
:PROPERTIES:
:ID:       e364744f-5e38-4a6f-88f7-a1fe1bc7a469
:END:



#+begin_src es
POST /twitter/tweet/
{
     "user" : "blah",
     "@timestamp" : "2015-09-10T19:12:12-05:00",
     "message" : "foobar123 abc asdf ....",
     "foo" : "bar"
}
#+end_src


#+begin_src es
DELETE /logstash-2016.02.15
{}
#+end_src

http://joelabrahamsson.com/dynamic-mappings-and-dates-in-elasticsearch/

#+begin_src es
// curl -XDELETE 'http://localhost:9200/twitter/'
GET /logstash-2016.02.17/_search?pretty
{}
#+end_src


#+begin_src es
GET /twitter/_search?pretty&q=user:blah
{}
#+end_src

** Digging out logstash documents
:PROPERTIES:
:ID:       c5eb88c0-c027-443b-b8bc-ba39e7877f4f
:END:

#+begin_src es :jq .hits.hits[0]
GET /logstash-2015.07.14/_search
{}
#+end_src

** Searching ES with the CSV Plugin
:PROPERTIES:
:ID:       2c825527-f598-4911-bf77-a36a92b8d14c
:END:
#+BEGIN_SRC es
POST /_search_csv?pretty
{
  "query": {
    "match_all": {}
  }
}
#+END_SRC

* Crossing Language boundaries in blocks
:PROPERTIES:
:ID:       4a239992-09d4-4d23-9494-85ae4f3a3591
:PUBDATE:  <2015-10-07 Wed 15:22>
:END:

** Emitting scalars output and feeding input
:PROPERTIES:
:ID:       5519963d-2b44-481e-aef9-01cba0541a2e
:END:

Here's a Ruby block to generate a scaler value
#+name: get_value
#+header: :var x=4 :exports both
#+begin_src ruby
  # x = 4
  5 + x
#+end_src


Here's a Python block that consumes the scalar value
#+name: square
#+header: :var x=call: get_value :exports both
#+begin_src python :exports code
  return x*x
#+end_src


** Emitting lists output and feeding input
:PROPERTIES:
:ID:       5519963d-2b44-481e-aef9-01cba0541a2e
:END:

Here's a Ruby block to generate a list
#+name: get_list
#+header: :exports both
#+begin_src ruby
  [[1 , 2, 3],
   [1 , 2, 3]]
#+end_src


Here's a Python block that consumes the list
#+name: print_list
#+header: :var x=call: get_list :exports both
#+begin_src python :exports code
  return x
#+end_src






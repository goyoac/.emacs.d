
* variable binding scopes
:PROPERTIES:
:ID:       7a159cef-753c-4eb0-ad0d-a1c08206b38d
:PUBDATE:  <2015-10-08 Thu 20:50>
:END:

local bindings demonstrating

http://www.gnu.org/software/emacs/manual/html_node/elisp/Local-Variables.html

let vs let*

#+name: let
#+begin_src emacs-lisp

;; a let binding
(progn

  (setq y 2)

  (let ((y 1)
        (z y))
    (list y z)))

#+end_src

#+RESULTS: let
| 1 | 2 |

#+name: let*
#+begin_src emacs-lisp

;; a let* binding
(progn

  (setq y 2)

  (let* ((y 1)
         (z y))
    (list y z)))


#+end_src

#+RESULTS: let*
| 1 | 1 |

** discusion:
:PROPERTIES:
:ID:       fb0c8475-36da-448a-aee4-3db97a645b76
:END:

let binds only s-expression values from the environment outside the
(let ...) form

let* successively binds each expression within the scope of the (let
...) form and from the environment.  the inner scope overrides the
outter scope.

* some precise work with table data
:PROPERTIES:
:ID:       254d7e8e-34e5-42cd-bfd2-8ddc6aa1d832
:PUBDATE:  <2015-10-08 Thu 20:50>
:END:


read up on var with tables:

very powerful!

http://orgmode.org/manual/var.html

#+NAME: 3D
#+BEGIN_SRC emacs-lisp
  '(((1  2  3)  (4  5  6)  (7  8  9))
    ((10 11 12) (13 14 15) (16 17 18))
    ((19 20 21) (22 23 24) (25 26 27)))
#+END_SRC

#+RESULTS: 3D
| (1 2 3)    | (4 5 6)    | (7 8 9)    |
| (10 11 12) | (13 14 15) | (16 17 18) |
| (19 20 21) | (22 23 24) | (25 26 27) |


#+BEGIN_SRC emacs-lisp :var data=3D[1,,1]
  data
#+END_SRC

#+RESULTS:
| 11 | 14 | 17 |

#+BEGIN_SRC emacs-lisp :var data=3D[1,1,]
  data
#+END_SRC

#+RESULTS:
| 13 | 14 | 15 |


#+BEGIN_SRC emacs-lisp :var data=3D[1,1,1]
  data
#+END_SRC

#+RESULTS:
: 14

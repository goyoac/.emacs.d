

* Tasks
** DONE Start a new org file
   CLOSED: [2015-07-11 Sat 22:52]
** DONE Provide some working examples
   CLOSED: [2015-07-15 Wed 11:34]
** DONE Have a cup of tea c
   CLOSED: [2015-07-15 Wed 11:34]
** TODO Commit this example


* Running code from multiple languages
** Using python
#+begin_src python
import datetime
today = datetime.date.today()
return today
#+end_src

** Using ruby
#+begin_src ruby
,require 'date'
,"This file was last evaluated on #{Date.today}"
#+end_src

** Using clojure
#+begin_src clojure
(defn now [] (java.util.Date.))
(now)
#+end_src

** Using lisp
examples - http://orgmode.org/manual/var.html

#+begin_src lisp
(defun current-date-string ()
  "Returns current date as a string."
  (multiple-value-bind (sec min hr day mon yr dow dst-p tz)
                       (get-decoded-time)
    (declare (ignore sec min hr dow dst-p tz))
    (format nil "~4,'0d-~2,'0d-~2,'0d" yr mon day)))
(current-date-string)
#+end_src

#+name: hello-world
#+header: :var message="Hello World!"
#+begin_src lisp
  (princ message)
#+end_src

#+NAME: example-table
| 1 |
| 2 |
| 3 |
| 4 |

#+NAME: table-length
#+BEGIN_SRC emacs-lisp :var table=example-table
(length table)
#+END_SRC





* Working With Elasticsearch
** Searching ES
#+BEGIN_SRC es
POST /_search?pretty
{
  "query": {
    "match_all": {}
  }
}
#+END_SRC

** Searching ES without parameters
#+BEGIN_SRC es :method POST :url localhost:9200/_search?pretty
{
  "query": {
    "match_all": {}
  }
}
#+END_SRC


** Searching ES with local jq filter
#+BEGIN_SRC es :jq .name, .version.number
GET /
{}
#+END_SRC


** Creating and Searching for documents in ES for user data with local jq filter



#+begin_src es
POST /twitter/tweet/
{
     "user" : "samples",
     "@timestamp" : "2015-09-10T19:12:12-05:00",
     "message" : "bye bye...",
     "foo" : "bar"
}
#+end_src

#+RESULTS:
: {"_index":"twitter","_type":"tweet","_id":"AU-52iGz1ohHlns3s51Z","_version":1,"created":true}


#+begin_src es
GET /twitter/_search?pretty&q=user:samples
{}
#+end_src

#+RESULTS:
#+begin_example
{
  "took" : 1,
  "timed_out" : false,
  "_shards" : {
    "total" : 5,
    "successful" : 5,
    "failed" : 0
  },
  "hits" : {
    "total" : 2,
    "max_score" : 0.5945348,
    "hits" : [ {
      "_index" : "twitter",
      "_type" : "tweet",
      "_id" : "AU-4nMNq1ohHlns3s51T",
      "_score" : 0.5945348,
      "_source":{
     "user" : "samples",
     "post_date" : "2015-09-10T13:12:12",
     "message" : "hi there...",
     "foo" : "bar"
}
    }, {
      "_index" : "twitter",
      "_type" : "tweet",
      "_id" : "AU-4nbdg1ohHlns3s51U",
      "_score" : 0.5945348,
      "_source":{
     "user" : "samples",
     "post_date" : "2015-09-10T13:12:12",
     "message" : "bye bye...",
     "foo" : "bar"
}
    } ]
  }
}
#+end_example





** Digging out logstash documents

#+begin_src es :jq .hits.hits[0]
GET /logstash-2015.07.14/_search
{}
#+end_src

** Searching ES with the CSV Plugin
#+BEGIN_SRC es
POST /_search_csv?pretty
{
  "query": {
    "match_all": {}
  }
}
#+END_SRC
   
